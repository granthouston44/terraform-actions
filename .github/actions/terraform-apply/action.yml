name: Terraform Apply
description: Download plan artifact, compute standard backend path from environment, optionally assume AWS role, and run terraform apply.
author: Tesco Terraform Tooling Team
inputs:
  working_directory:
    description: Directory containing Terraform configuration.
    required: false
    default: "."
  environment:
    description: Environment name (sandbox/dev/prod) used to derive backend path and role
    required: true
  aws_role_to_assume:
    description: Optional full AWS role ARN to assume.
    required: false
    default: ""
  aws_account_id:
    description: Optional AWS account ID (used to compute a standard role ARN when aws_role_to_assume is empty).
    required: false
    default: ""
  aws_region:
    description: AWS region for credentials configuration.
    required: false
    default: "eu-west-1"
  backend_config_file:
    description: Optional path to a .tfbackend file. If provided, this takes precedence over computed config.
    required: false
    default: ""
  backend_bucket_prefix:
    description: Prefix for S3 backend bucket name; actual bucket is <prefix><environment> when computing config.
    required: false
    default: "ims-terraform-infrastructure-state-"
  backend_lock_table_prefix:
    description: Prefix for DynamoDB lock table name; actual table is <prefix><environment> when computing config.
    required: false
    default: "ims-terraform-infrastructure-state-lock-"
  backend_key:
    description: Optional state object key; if empty, defaults to ims-<repo>-<environment>.tfstate
    required: false
    default: ""
runs:
  using: composite
  steps:
    - name: Download plan artifact
      uses: actions/download-artifact@v4
      with:
        name: tfplan
        path: ${{ inputs.working_directory }}

    - name: Compute role ARN
      id: role
      shell: bash
      env:
        IN_ROLE: ${{ inputs.aws_role_to_assume }}
        IN_ACCT: ${{ inputs.aws_account_id }}
        ENV_NAME: ${{ inputs.environment }}
      run: |
        set -euo pipefail
        ROLE_ARN="${IN_ROLE}"
        if [ -z "$ROLE_ARN" ] && [ -n "${IN_ACCT}" ]; then
          ROLE_ARN="arn:aws:iam::${IN_ACCT}:role/ims-terraform-infrastructure-role-${ENV_NAME}"
        fi
        echo "role_arn=$ROLE_ARN" >> "$GITHUB_OUTPUT"

    - name: Configure AWS credentials
      if: ${{ steps.role.outputs.role_arn != '' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ steps.role.outputs.role_arn }}
        aws-region: ${{ inputs.aws_region }}
        role-session-name: github-actions

    - name: Terraform apply
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        set -euo pipefail
        ENV_NAME="${{ inputs.environment }}"
        PLAN_FILE="plan-${ENV_NAME}.tfplan"
        if [ -n "${{ inputs.backend_config_file }}" ]; then
          terraform init -input=false -reconfigure -backend-config="${{ inputs.backend_config_file }}"
        elif [ -f "env/${ENV_NAME}/${ENV_NAME}.tfbackend" ]; then
          terraform init -input=false -reconfigure -backend-config="env/${ENV_NAME}/${ENV_NAME}.tfbackend"
        else
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          KEY="${{ inputs.backend_key }}"
          if [ -z "$KEY" ]; then
            KEY="ims-${REPO_NAME}-${ENV_NAME}.tfstate"
          fi
          BUCKET="${{ inputs.backend_bucket_prefix }}${ENV_NAME}"
          TABLE="${{ inputs.backend_lock_table_prefix }}${ENV_NAME}"
          REGION="${{ inputs.aws_region }}"
          terraform init -input=false -reconfigure \
            -backend-config="bucket=${BUCKET}" \
            -backend-config="key=${KEY}" \
            -backend-config="region=${REGION}" \
            -backend-config="dynamodb_table=${TABLE}" \
            -backend-config="encrypt=true"
        fi
        APPLY_ARGS=("-input=false" "$PLAN_FILE")
        echo "Running: terraform apply ${APPLY_ARGS[*]}"
        terraform apply "${APPLY_ARGS[@]}"

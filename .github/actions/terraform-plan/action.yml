name: Terraform Plan
description: Compute standard backend/plan paths from environment, assume role via env-scoped vars, and run terraform plan with artifacts.
author: Tesco Terraform Tooling Team
inputs:
  working_directory:
    description: Directory containing Terraform configuration.
    required: false
    default: "."
  environment:
    description: Environment name (sandbox/dev/prod) used to derive backend/plan paths and role
    required: true
  
outputs:
  plan_status:
    description: Result of terraform plan (changes, no_changes).
    value: ${{ steps.plan.outputs.plan_status }}
  plan_exit_code:
    description: Exit code returned by terraform plan (useful with -detailed-exitcode).
    value: ${{ steps.plan.outputs.plan_exit_code }}
  plan_file:
    description: Path to the generated plan file.
    value: ${{ steps.plan.outputs.plan_file }}
  plan_text_path:
    description: Path to the rendered human-readable plan file.
    value: ${{ steps.capture.outputs.plan_text_path }}
  plan_json_path:
    description: Path to the rendered JSON plan file (empty when disabled).
    value: ${{ steps.capture.outputs.plan_json_path }}
runs:
  using: composite
  steps:
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.5

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/ims-terraform-infrastructure-role-${{ inputs.environment }}
        aws-region: eu-west-1
        role-session-name: github-actions

    - name: Terraform init
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        set -euo pipefail
        ENV_NAME="${{ inputs.environment }}"
        terraform init -input=false -reconfigure -backend-config="env/${ENV_NAME}/${ENV_NAME}.tfbackend"

    - name: Terraform plan
      id: plan
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        set -euo pipefail
        ENV_NAME="${{ inputs.environment }}"
        PLAN_FILE="plan-${ENV_NAME}.tfplan"
        set +e
        terraform plan -input=false -no-color -detailed-exitcode -out="$PLAN_FILE"
        EXIT_CODE=$?
        set -e
        case $EXIT_CODE in
          0) PLAN_STATUS="no_changes" ;;
          2) PLAN_STATUS="changes" ;;
          *) echo "terraform plan failed with exit code $EXIT_CODE" >&2; exit "$EXIT_CODE" ;;
        esac
        echo "plan_status=$PLAN_STATUS" >> "$GITHUB_OUTPUT"
        echo "plan_exit_code=$EXIT_CODE" >> "$GITHUB_OUTPUT"
        echo "plan_file=$(pwd)/$PLAN_FILE" >> "$GITHUB_OUTPUT"

    - name: Capture plan outputs
      id: capture
      if: ${{ success() }}
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        set -euo pipefail
        ENV_NAME="${{ inputs.environment }}"
        PLAN_FILE="plan-${ENV_NAME}.tfplan"
        terraform show -no-color "$PLAN_FILE" > plan.txt
        terraform show -json "$PLAN_FILE" > plan.json
        echo "plan_text_path=$(pwd)/plan.txt" >> "$GITHUB_OUTPUT"
        echo "plan_json_path=$(pwd)/plan.json" >> "$GITHUB_OUTPUT"

    - name: Upload plan artifact
      if: ${{ steps.plan.outputs.plan_file != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: |
          ${{ steps.plan.outputs.plan_file }}
          ${{ steps.capture.outputs.plan_text_path }}
          ${{ steps.capture.outputs.plan_json_path }}
        if-no-files-found: ignore

name: Terraform Plan
description: Compute backend/plan paths from environment and run terraform plan with artifacts. Assumes AWS credentials configured by the caller.
author: Tesco Terraform Tooling Team
inputs:
  working_directory:
    description: Directory containing Terraform configuration.
    required: false
    default: "."
  environment:
    description: Environment name (sandbox/dev/prod) used to derive backend/plan paths and role
    required: true
  var_file:
    description: Optional path to a tfvars file relative to working_directory.
    required: false
    default: ""
  backend_config_file:
    description: Optional path to a .tfbackend file. If provided, this takes precedence over computed config.
    required: false
    default: ""
  
outputs:
  plan_status:
    description: Result of terraform plan (changes, no_changes).
    value: ${{ steps.plan.outputs.plan_status }}
  plan_exit_code:
    description: Exit code returned by terraform plan (useful with -detailed-exitcode).
    value: ${{ steps.plan.outputs.plan_exit_code }}
  plan_file:
    description: Path to the generated plan file.
    value: ${{ steps.plan.outputs.plan_file }}
  plan_text_path:
    description: Path to the rendered human-readable plan file.
    value: ${{ steps.capture.outputs.plan_text_path }}
  plan_json_path:
    description: Path to the rendered JSON plan file (empty when disabled).
    value: ${{ steps.capture.outputs.plan_json_path }}
runs:
  using: composite
  steps:
    - name: Terraform init
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        set -euo pipefail
        ENV_NAME="${{ inputs.environment }}"
        if [ -n "${{ inputs.backend_config_file }}" ]; then
          terraform init -input=false -reconfigure -backend-config="${{ inputs.backend_config_file }}"
        elif [ -f "env/${ENV_NAME}/${ENV_NAME}.tfbackend" ]; then
          terraform init -input=false -reconfigure -backend-config="env/${ENV_NAME}/${ENV_NAME}.tfbackend"
        else
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          KEY="ims-${REPO_NAME}-${ENV_NAME}.tfstate"
          BUCKET="ims-terraform-infrastructure-state-${ENV_NAME}"
          TABLE="ims-terraform-infrastructure-state-lock-${ENV_NAME}"
          REGION="eu-west-1"
          terraform init -input=false -reconfigure \
            -backend-config="bucket=${BUCKET}" \
            -backend-config="key=${KEY}" \
            -backend-config="region=${REGION}" \
            -backend-config="dynamodb_table=${TABLE}" \
            -backend-config="encrypt=true"
        fi

    - name: Terraform plan
      id: plan
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        set -euo pipefail
        ENV_NAME="${{ inputs.environment }}"
        PLAN_FILE="plan-${ENV_NAME}.tfplan"
        PLAN_ARGS=("-input=false" "-no-color" "-detailed-exitcode" "-out=$PLAN_FILE")
        if [ -n "${{ inputs.var_file }}" ]; then
          if [ -f "${{ inputs.var_file }}" ]; then
            PLAN_ARGS+=("-var-file=${{ inputs.var_file }}")
          else
            echo "Warning: var_file path '${{ inputs.var_file }}' not found; continuing without it" >&2
          fi
        fi
        set +e
        terraform plan "${PLAN_ARGS[@]}"
        EXIT_CODE=$?
        set -e
        case $EXIT_CODE in
          0) PLAN_STATUS="no_changes" ;;
          2) PLAN_STATUS="changes" ;;
          *) echo "terraform plan failed with exit code $EXIT_CODE" >&2; exit "$EXIT_CODE" ;;
        esac
        echo "plan_status=$PLAN_STATUS" >> "$GITHUB_OUTPUT"
        echo "plan_exit_code=$EXIT_CODE" >> "$GITHUB_OUTPUT"
        echo "plan_file=$(pwd)/$PLAN_FILE" >> "$GITHUB_OUTPUT"

    - name: Capture plan outputs
      id: capture
      if: ${{ success() }}
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        set -euo pipefail
        ENV_NAME="${{ inputs.environment }}"
        PLAN_FILE="plan-${ENV_NAME}.tfplan"
        terraform show -no-color "$PLAN_FILE" > plan.txt
        terraform show -json "$PLAN_FILE" > plan.json
        echo "plan_text_path=$(pwd)/plan.txt" >> "$GITHUB_OUTPUT"
        echo "plan_json_path=$(pwd)/plan.json" >> "$GITHUB_OUTPUT"

    - name: Upload plan artifact
      if: ${{ steps.plan.outputs.plan_file != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: |
          ${{ steps.plan.outputs.plan_file }}
          ${{ steps.capture.outputs.plan_text_path }}
          ${{ steps.capture.outputs.plan_json_path }}
        if-no-files-found: ignore

name: Terraform Destroy

on:
  workflow_call:
    inputs:
      working_directory:
        description: Path to the Terraform module root.
        required: true
        type: string
      environment:
        description: Environment name used for backend/vars and role resolution.
        required: true
        type: string
  workflow_dispatch:
    inputs:
      working_directory:
        description: Path to the Terraform module root.
        required: true
        default: "."
      environment:
        description: Environment name (drives backend/vars/approval/role)
        required: true
        default: "prod"

permissions:
  contents: read
  id-token: write

concurrency:
  group: terraform-destroy-${{ inputs.working_directory }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  plan-destroy:
    name: Plan Destroy
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/ims-terraform-infrastructure-role-${{ inputs.environment }}
          aws-region: eu-west-1
          role-session-name: github-actions

      - name: Terraform setup
        uses: tescotestims/terraform-actions/.github/actions/terraform-setup@main
        with:
          environment: ${{ inputs.environment }}
          working_directory: ${{ inputs.working_directory }}

      - name: Terraform plan (destroy)
        id: destroy_plan
        shell: bash
        run: |
          ENV_NAME="${{ inputs.environment }}"
          PLAN_FILE="destroy-plan-${ENV_NAME}.tfplan"
          set +e
          terraform plan -destroy -input=false -no-color -detailed-exitcode -out="$PLAN_FILE" -var-file="env/${ENV_NAME}/${ENV_NAME}.tfvars"
          ec=$?
          if [ $ec -eq 0 ] || [ $ec -eq 2 ]; then
            status=$([ $ec -eq 2 ] && echo changes || echo no_changes)
            echo "destroy_plan_status=$status" >> "$GITHUB_OUTPUT"
            echo "destroy_plan_exit_code=$ec" >> "$GITHUB_OUTPUT"
            echo "destroy_plan_file=$(pwd)/$PLAN_FILE" >> "$GITHUB_OUTPUT"
            exit 0
          else
            exit $ec
          fi

      - name: Capture destroy plan outputs
        id: capture
        if: ${{ success() }}
        shell: bash
        run: |
          ENV_NAME="${{ inputs.environment }}"
          PLAN_FILE="destroy-plan-${ENV_NAME}.tfplan"
          terraform show -no-color "$PLAN_FILE" > destroy-plan.txt
          terraform show -json "$PLAN_FILE" > destroy-plan.json
          echo "destroy_plan_text_path=$(pwd)/destroy-plan.txt" >> "$GITHUB_OUTPUT"
          echo "destroy_plan_json_path=$(pwd)/destroy-plan.json" >> "$GITHUB_OUTPUT"

      - name: Upload destroy plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfdestroy-plan
          path: |
            ${{ steps.destroy_plan.outputs.destroy_plan_file }}
            ${{ steps.capture.outputs.destroy_plan_text_path }}
            ${{ steps.capture.outputs.destroy_plan_json_path }}
          if-no-files-found: ignore

  approval:
    name: Destroy Approval Gate
    if: ${{ github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    needs: [plan-destroy]
    environment: ${{ format('{0}-deploy', inputs.environment) }}
    steps:
      - name: Await environment approval
        run: echo "Awaiting approval in environment '${{ format('{0}-deploy', inputs.environment) }}'"

  destroy:
    name: Destroy
    runs-on: ubuntu-latest
    needs: [plan-destroy, approval]
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/ims-terraform-infrastructure-role-${{ inputs.environment }}
          aws-region: eu-west-1
          role-session-name: github-actions

      - name: Terraform setup
        uses: tescotestims/terraform-actions/.github/actions/terraform-setup@main
        with:
          environment: ${{ inputs.environment }}
          working_directory: ${{ inputs.working_directory }}

      - name: Terraform destroy
        uses: tescotestims/terraform-actions/.github/actions/terraform-destroy@main
        with:
          working_directory: ${{ inputs.working_directory }}
          environment: ${{ inputs.environment }}

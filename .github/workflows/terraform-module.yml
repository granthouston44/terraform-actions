name: Terraform Module

on:
  workflow_call:
    inputs:
      working_directory:
        description: Path to the Terraform module root.
        required: true
        type: string
      environment:
        description: Environment name used for backend/vars, approvals and role resolution.
        required: true
        type: string
  workflow_dispatch:
    inputs:
      working_directory:
        description: Path to the Terraform module root.
        required: true
        default: "."
      environment:
        description: Environment name (drives backend/vars/plan/approval/role)
        required: true
        default: "prod"

permissions:
  contents: read
  id-token: write
  pull-requests: write

concurrency:
  group: terraform-${{ inputs.working_directory }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  context:
    name: Run Context
    runs-on: ubuntu-latest
    outputs:
      effective_role_arn: ${{ steps.compute.outputs.effective_role_arn }}
    steps:
      - name: Compute effective role ARN
        id: compute
        shell: bash
        env:
          ENV: ${{ inputs.environment }}
          ROLE_BASE: ims-terraform-infrastructure-role
          AWS_ACCOUNT_ID_SANDBOX: ${{ secrets.AWS_ACCOUNT_ID_SANDBOX }}
          AWS_ACCOUNT_ID_DEV: ${{ secrets.AWS_ACCOUNT_ID_DEV }}
          AWS_ACCOUNT_ID_PROD: ${{ secrets.AWS_ACCOUNT_ID_PROD }}
        run: |
          set -euo pipefail
          case "$ENV" in
            sandbox) ACCT="$AWS_ACCOUNT_ID_SANDBOX" ;;
            dev)     ACCT="$AWS_ACCOUNT_ID_DEV" ;;
            prod)    ACCT="$AWS_ACCOUNT_ID_PROD" ;;
            *)       ACCT="" ;;
          esac
          ROLE_ARN=""
          if [ -n "${ACCT}" ]; then
            ROLE_ARN="arn:aws:iam::${ACCT}:role/${ROLE_BASE}-${ENV}"
          fi
          echo "account_id=${ACCT}" >> "$GITHUB_OUTPUT"
          echo "effective_role_arn=${ROLE_ARN}" >> "$GITHUB_OUTPUT"

      - name: Summarise inputs and trigger context
        uses: granthouston44/terraform-actions/.github/actions/print-run-context@v0.2.1
        with:
          title: Terraform Module Workflow Context
          environment: ${{ inputs.environment }}
          aws_account_id: ${{ steps.compute.outputs.account_id }}
          aws_role_arn: ${{ steps.compute.outputs.effective_role_arn }}
          working_directory: ${{ inputs.working_directory }}
          backend_config_file: env/${{ inputs.environment }}.backend.hcl
          var_file: env/${{ inputs.environment }}.tfvars
          plan_file: plan-${{ inputs.environment }}.tfplan
          terraform_version: 1.8.5
  plan:
    name: Plan
    runs-on: ubuntu-latest
    needs: context
    outputs:
      changed: ${{ steps.plan.outputs.plan_status == 'changes' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Terraform setup (fmt/validate/tfsec)
        uses: granthouston44/terraform-actions/.github/actions/terraform-setup@v0.2.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          terraform_version: 1.8.5
          working_directory: ${{ inputs.working_directory }}
          run_local_init: false

      - name: Terraform plan
        id: plan
        uses: granthouston44/terraform-actions/.github/actions/terraform-plan@v0.2.1
        with:
          working_directory: ${{ inputs.working_directory }}
          backend_config_file: env/${{ inputs.environment }}.backend.hcl
          var_file: env/${{ inputs.environment }}.tfvars
          plan_file: plan-${{ inputs.environment }}.tfplan
          additional_init_args: ''
          additional_plan_args: ''
          aws_role_to_assume: ${{ needs.context.outputs.effective_role_arn }}
          aws_region: eu-west-1
          aws_session_name: github-actions
          artifact_name: tfplan

      - name: PR comment with plan
        if: ${{ github.event_name == 'pull_request' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: ${{ steps.plan.outputs.plan_text_path }}

  plan-approval:
    name: Plan Approval Gate
    if: ${{ github.ref == 'refs/heads/main' && needs.plan.outputs.changed == 'true' }}
    runs-on: ubuntu-latest
    needs: [plan]
    environment: ${{ inputs.environment }}
    steps:
      - name: Await environment approval
        run: echo "Environment approval granted for plan in ${{ inputs.environment }}"

  apply:
    name: Apply
    if: ${{ github.ref == 'refs/heads/main' && needs.plan.outputs.changed == 'true' }}
    runs-on: ubuntu-latest
    needs: [plan, plan-approval]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Terraform setup (fmt/validate)
        uses: granthouston44/terraform-actions/.github/actions/terraform-setup@v0.2.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          terraform_version: 1.8.5
          working_directory: ${{ inputs.working_directory }}
          run_local_init: false

      - name: Terraform apply
        uses: granthouston44/terraform-actions/.github/actions/terraform-apply@v0.2.1
        with:
          working_directory: ${{ inputs.working_directory }}
          backend_config_file: env/${{ inputs.environment }}.backend.hcl
          var_file: env/${{ inputs.environment }}.tfvars
          plan_file: plan-${{ inputs.environment }}.tfplan
          additional_init_args: ''
          additional_apply_args: ''
          apply_auto_approve: false
          aws_role_to_assume: ${{ needs.context.outputs.effective_role_arn }}
          aws_region: eu-west-1
          aws_session_name: github-actions
          artifact_name: tfplan
